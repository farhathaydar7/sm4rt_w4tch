{
  "info": {
    "_postman_id": "a7c43e85-3f9a-4c91-b6d5-8b7b9f8e4d2c",
    "name": "Sm4rt W4tch API Tests",
    "description": "A collection for testing the Sm4rt W4tch API endpoints, with a focus on the AI features.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    pm.expect(jsonData.token).to.exist;",
                  "});",
                  "",
                  "if (jsonData.token) {",
                  "    pm.environment.set(\"auth_token\", jsonData.token);",
                  "    console.log(\"Token saved to environment\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{user_email}}\",\n    \"password\": \"{{user_password}}\"\n}"
            },
            "url": {
              "raw": "{{api_url}}/auth/login",
              "host": ["{{api_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login to get the authentication token"
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for getting tokens"
    },
    {
      "name": "AI Endpoints",
      "item": [
        {
          "name": "Test AI Connection",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Status is success\", function () {",
                  "    pm.expect(jsonData.status).to.equal(\"success\");",
                  "});",
                  "",
                  "pm.test(\"Message indicates AI is running\", function () {",
                  "    pm.expect(jsonData.message).to.include(\"AI model is running\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{api_url}}/ai/test",
              "host": ["{{api_url}}"],
              "path": ["ai", "test"]
            },
            "description": "Test if the AI service is running and accessible"
          },
          "response": []
        },
        {
          "name": "Get AI Insights",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Status is success\", function () {",
                  "    pm.expect(jsonData.status).to.equal(\"success\");",
                  "});",
                  "",
                  "pm.test(\"Response contains insights data\", function () {",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.insights).to.exist;",
                  "});",
                  "",
                  "// Check if we're getting fallback insights",
                  "if (jsonData.data.is_fallback) {",
                  "    console.log(\"WARNING: Using fallback insights - AI service might be down\");",
                  "}",
                  "",
                  "// Test for specific insights sections",
                  "pm.test(\"Insights contains required sections\", function () {",
                  "    const insights = jsonData.data.insights;",
                  "    pm.expect(insights.summary).to.exist;",
                  "    pm.expect(insights.health_impact).to.exist;",
                  "    pm.expect(insights.recommendations).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"data\": {\n        \"activity_metrics\": {\n            \"daily_steps\": 8542,\n            \"active_minutes\": 35,\n            \"distance\": 6.83\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{api_url}}/ai/insights",
              "host": ["{{api_url}}"],
              "path": ["ai", "insights"]
            },
            "description": "Get AI-generated insights about activity data"
          },
          "response": []
        },
        {
          "name": "Get AI Predictions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Status is success\", function () {",
                  "    pm.expect(jsonData.status).to.equal(\"success\");",
                  "});",
                  "",
                  "pm.test(\"Response contains predictions data\", function () {",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.predictions).to.exist;",
                  "});",
                  "",
                  "// Check if we're getting fallback predictions",
                  "if (jsonData.data.is_fallback) {",
                  "    console.log(\"WARNING: Using fallback predictions - AI service might be down\");",
                  "}",
                  "",
                  "// Test for specific prediction sections",
                  "pm.test(\"Predictions contains required sections\", function () {",
                  "    const predictions = jsonData.data.predictions;",
                  "    pm.expect(predictions.goal_achievement).to.exist;",
                  "    pm.expect(predictions.anomaly_detection).to.exist;",
                  "    pm.expect(predictions.future_projections).to.exist;",
                  "    pm.expect(predictions.actionable_insights).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate sample activity history data",
                  "function generateSampleData(numDays) {",
                  "    const data = [];",
                  "    const today = new Date();",
                  "    ",
                  "    for (let i = 0; i < numDays; i++) {",
                  "        const date = new Date();",
                  "        date.setDate(today.getDate() - i);",
                  "        const dateStr = date.toISOString().split('T')[0];",
                  "        ",
                  "        // Generate random but reasonable values",
                  "        const steps = Math.floor(Math.random() * 10000) + 5000;",
                  "        const activeMinutes = Math.floor(Math.random() * 40) + 20;",
                  "        const distance = Math.round(steps * 0.0008 * 100) / 100;",
                  "        ",
                  "        data.push({",
                  "            date: dateStr,",
                  "            steps: steps,",
                  "            active_minutes: activeMinutes,",
                  "            distance: distance",
                  "        });",
                  "    }",
                  "    ",
                  "    return data;",
                  "}",
                  "",
                  "// Store the generated data in a variable",
                  "pm.variables.set('activityHistory', JSON.stringify(generateSampleData(14)));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"data\": {\n        \"activity_history\": {{activityHistory}},\n        \"goals\": {\n            \"daily_steps\": 10000,\n            \"weekly_active_minutes\": 150\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{api_url}}/ai/predict",
              "host": ["{{api_url}}"],
              "path": ["ai", "predict"]
            },
            "description": "Get AI-generated predictions based on activity history"
          },
          "response": []
        },
        {
          "name": "Get AI Insights (Database Data)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Status is success\", function () {",
                  "    pm.expect(jsonData.status).to.equal(\"success\");",
                  "});",
                  "",
                  "pm.test(\"Response contains insights data\", function () {",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.insights).to.exist;",
                  "});",
                  "",
                  "// Check if we're getting fallback insights",
                  "if (jsonData.data.is_fallback) {",
                  "    console.log(\"WARNING: Using fallback insights - AI service might be down\");",
                  "}",
                  "",
                  "// Test for specific insights sections",
                  "pm.test(\"Insights contains required sections\", function () {",
                  "    const insights = jsonData.data.insights;",
                  "    pm.expect(insights.summary).to.exist;",
                  "    pm.expect(insights.health_impact).to.exist;",
                  "    pm.expect(insights.recommendations).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"data\": {}\n}"
            },
            "url": {
              "raw": "{{api_url}}/ai/insights",
              "host": ["{{api_url}}"],
              "path": ["ai", "insights"]
            },
            "description": "Get AI-generated insights using data from the database"
          },
          "response": []
        },
        {
          "name": "Get AI Predictions (Database Data)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Status is success\", function () {",
                  "    pm.expect(jsonData.status).to.equal(\"success\");",
                  "});",
                  "",
                  "pm.test(\"Response contains predictions data\", function () {",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.predictions).to.exist;",
                  "});",
                  "",
                  "// Check if we're getting fallback predictions",
                  "if (jsonData.data.is_fallback) {",
                  "    console.log(\"WARNING: Using fallback predictions - AI service might be down\");",
                  "}",
                  "",
                  "// Test for specific prediction sections",
                  "pm.test(\"Predictions contains required sections\", function () {",
                  "    const predictions = jsonData.data.predictions;",
                  "    pm.expect(predictions.goal_achievement).to.exist;",
                  "    pm.expect(predictions.anomaly_detection).to.exist;",
                  "    pm.expect(predictions.future_projections).to.exist;",
                  "    pm.expect(predictions.actionable_insights).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"data\": {}\n}"
            },
            "url": {
              "raw": "{{api_url}}/ai/predict",
              "host": ["{{api_url}}"],
              "path": ["ai", "predict"]
            },
            "description": "Get AI-generated predictions using data from the database"
          },
          "response": []
        }
      ],
      "description": "Endpoints for AI functionality testing"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "api_url",
      "value": "http://localhost:8000/api",
      "type": "string"
    },
    {
      "key": "user_email",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "user_password",
      "value": "password123",
      "type": "string"
    }
  ]
}
